// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	labels "k8s.io/apimachinery/pkg/labels"

	runtime "k8s.io/apimachinery/pkg/runtime"
)

// GenericNamespaceLister is an autogenerated mock type for the GenericNamespaceLister type
type GenericNamespaceLister struct {
	mock.Mock
}

// Get provides a mock function with given fields: name
func (_m *GenericNamespaceLister) Get(name string) (runtime.Object, error) {
	ret := _m.Called(name)

	var r0 runtime.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (runtime.Object, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) runtime.Object); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(runtime.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: selector
func (_m *GenericNamespaceLister) List(selector labels.Selector) ([]runtime.Object, error) {
	ret := _m.Called(selector)

	var r0 []runtime.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(labels.Selector) ([]runtime.Object, error)); ok {
		return rf(selector)
	}
	if rf, ok := ret.Get(0).(func(labels.Selector) []runtime.Object); ok {
		r0 = rf(selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]runtime.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(labels.Selector) error); ok {
		r1 = rf(selector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGenericNamespaceLister creates a new instance of GenericNamespaceLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGenericNamespaceLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *GenericNamespaceLister {
	mock := &GenericNamespaceLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
