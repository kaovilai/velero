//go:build docgen
// +build docgen

/*
Copyright 2023 the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file is used to generate the documentation for the CLI reference.
// run by hack/update-5generate-cli-reference.sh

package main

import (
	"os"
	"path/filepath"
	"strings"

	"github.com/spf13/cobra/doc"

	"github.com/vmware-tanzu/velero/pkg/cmd/velero"
)

const hugoLayout = `layout: docs`
const hugoHeader = `---
` + hugoLayout + `
title: CLI Reference
---
`
const indexIntro = `
Click on a command to see more information.
`

func main() {
	// get baseDir from command line args
	baseDir := "./site/content/docs/main/cli-reference"
	if len(os.Args) > 1 {
		baseDir = os.Args[1]
	}
	// if baseDir does not exist, create it
	if err := os.MkdirAll(baseDir, 0755); err != nil {
		panic(err)
	}
	// remove _index.md if it exists
	if err := os.Remove(baseDir + "/_index.md"); err != nil && !os.IsNotExist(err) {
		panic(err)
	}
	// if config file exists, rename it
	configName := filepath.Join(os.Getenv("HOME"), ".config", "velero", "config.json")
	configExists := false
	if _, err := os.Stat(configName); err == nil {
		if err := os.Rename(configName, configName+".bak"); err != nil {
			panic(err)
		}
		configExists = true
	}
	defer func() {
		// if config file exists, rename it back
		if configExists {
			if err := os.Rename(configName+".bak", configName); err != nil {
				panic(err)
			}
		}
	}()
	veleroNamespaceEnvBackup := os.Getenv("VELERO_NAMESPACE")
	os.Unsetenv("VELERO_NAMESPACE")
	defer func() {
		// if VELERO_NAMESPACE was set, set it back
		if veleroNamespaceEnvBackup != "" {
			if err := os.Setenv("VELERO_NAMESPACE", veleroNamespaceEnvBackup); err != nil {
				panic(err)
			}
		}
	}()
	if err := doc.GenMarkdownTree(velero.NewCommand("velero"), baseDir); err != nil {
		panic(err)
	}

	// for each file in baseDir, add hugo header
	files, err := os.ReadDir(baseDir)
	if err != nil {
		panic(err)
	}
	// create index.md
	index, err := os.Create(baseDir + "/_index.md")
	if err != nil {
		panic(err)
	}
	index.WriteString(hugoHeader)
	index.WriteString(indexIntro)
	for _, file := range files {
		if file.IsDir() {
			continue
		}
		f, err := os.Open(baseDir + "/" + file.Name())
		if err != nil {
			panic(err)
		}
		// file size
		fstat, err := f.Stat()
		if err != nil {
			panic(err)
		}
		// read in the file
		b := make([]byte, fstat.Size())
		n, err := f.Read(b)
		if err != nil {
			panic(err)
		}
		f.Close()
		// save first line and reformat as hugo title
		lines := strings.Split(string(b[:n]), "\n")
		firstLine := lines[0]
		formattedCommand := strings.TrimPrefix(firstLine, "## ")

		f, err = os.Create(baseDir + "/" + file.Name())
		if err != nil {
			panic(err)
		}
		// prepend hugo header
		f.WriteString(`---
` + hugoLayout + `
title: ` + formattedCommand + `
---
`)
		// write the rest of the file
		// trim last two lines to remove cobra autogenerated text which causes ci to fail
		// due to the autogenerated text changing on each day
		for _, line := range lines[2 : len(lines)-2] {
			f.WriteString(line + "\n")
		}
		f.Close()
		index.WriteString("\n* [" + formattedCommand + "](" + file.Name() + ")\n")
	}
	index.Close()
}
